{"version":3,"sources":["../../../projects/ngx-smooth-scroll/src/lib/services/smooth-scroll.service.ts","../../../projects/ngx-smooth-scroll/src/lib/directives/scroll/scroll.directive.ts","../../../projects/ngx-smooth-scroll/src/lib/directives/scroll-to/scroll-to.directive.ts","../../../projects/ngx-smooth-scroll/src/lib/smooth-scroll.module.ts"],"names":["SmoothScrollService","this","DEFAULT_OPTIONS","duration","offset","easing","callbackBefore","callbackAfter","containerID","middleAlign","_timeLapsed","prototype","scrollTo","element","options","_this","_element","_options","Object","assign","_container","document","getElementById","setTimeout","_startLocation","_getScrollLocation","_endLocation","_getEndLocation","_distance","_lastFrameTime","Date","now","requestAnimationFrame","_animateScroll","scrollTop","window","pageYOffset","documentElement","_getEasingPattern","type","time","location","absoluteElementTop","getBoundingClientRect","top","offsetHeight","innerHeight","Math","max","PREVIOUS_FRAME_DURATION","PERCENTAGE","_position","currentLocation","scrollHeight","body","internalHeight","clientHeight","Injectable","args","providedIn","ScrollDirective","_elementRef","_smoothScrollService","onClick","target","scrollOnClick","scroll","ngOnInit","scrollIf","nativeElement","Directive","selector","ElementRef","Input","HostListener","ScrollToDirective","TARGET","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {ISmoothScrollOptions} from \"../interfaces/ISmoothScrollOptions\";\nimport {EasingType} from \"../types/EasingType\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmoothScrollService\n{\n  readonly DEFAULT_OPTIONS: ISmoothScrollOptions = {\n    duration:       800,\n    offset:         0,\n    easing:         'easeInOutQuart',\n    callbackBefore: () => null,\n    callbackAfter:  () => null,\n    containerID:    '',\n    middleAlign:    false\n  };\n\n  protected _options: ISmoothScrollOptions;\n  protected _element: HTMLElement;\n  protected _intervalRef: number;\n  protected _timeLapsed: number = 0;\n  protected _position: number;\n  protected _startLocation: number;\n  protected _endLocation: number;\n  protected _distance: number;\n  protected _container: HTMLElement;\n  protected _lastFrameTime:number;\n\n\n  /**\n   * Smoothly scroll to given element using given options\n   * @param {HTMLElement} element The element which you want to scroll to it\n   * @param {Partial<ISmoothScrollOptions>} options The scrolling options\n   */\n  scrollTo(element: HTMLElement, options: Partial<ISmoothScrollOptions> = {})\n  {\n    /**\n     * Keep element reference\n     */\n    this._element = element;\n\n    /**\n     * Merge given default options and given options\n     */\n    this._options = {...this.DEFAULT_OPTIONS, ...options};\n\n    /**\n     * Get container element\n     */\n    this._container = this._options.containerID ? document.getElementById(this._options.containerID) : null;\n\n\n    // Initialize the whole thing\n    setTimeout(() => {\n\n      this._timeLapsed    = 0;\n      this._startLocation = this._getScrollLocation();\n      this._endLocation   = this._getEndLocation(element);\n      this._distance      = this._endLocation - this._startLocation;\n\n      this._options.callbackBefore(element);\n\n      this._lastFrameTime = Date.now();\n\n      requestAnimationFrame(() => this._animateScroll());\n    }, 0);\n\n  }\n\n  /**\n   * Retrieve current scroll location\n   */\n  protected _getScrollLocation(): number\n  {\n    if (this._container)\n    {\n      return this._container.scrollTop;\n    }\n    else\n    {\n      if (window.pageYOffset)\n      {\n        return window.pageYOffset;\n      }\n      else\n      {\n        return document.documentElement.scrollTop;\n      }\n    }\n  }\n\n  /**\n   * Calculate easing pattern.\n   */\n  protected _getEasingPattern(type: EasingType, time: number): number\n  {\n    switch (type)\n    {\n      case 'easeInQuad':\n        return time * time; // accelerating from zero velocity\n      case 'easeOutQuad':\n        return time * (2 - time); // decelerating to zero velocity\n      case 'easeInOutQuad':\n        return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time; // acceleration until halfway, then deceleration\n      case 'easeInCubic':\n        return time * time * time; // accelerating from zero velocity\n      case 'easeOutCubic':\n        return (--time) * time * time + 1; // decelerating to zero velocity\n      case 'easeInOutCubic':\n        return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1; // acceleration until halfway, then deceleration\n      case 'easeInQuart':\n        return time * time * time * time; // accelerating from zero velocity\n      case 'easeOutQuart':\n        return 1 - (--time) * time * time * time; // decelerating to zero velocity\n      case 'easeInOutQuart':\n        return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * (--time) * time * time * time; // acceleration until halfway, then deceleration\n      case 'easeInQuint':\n        return time * time * time * time * time; // accelerating from zero velocity\n      case 'easeOutQuint':\n        return 1 + (--time) * time * time * time * time; // decelerating to zero velocity\n      case 'easeInOutQuint':\n        return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * (--time) * time * time * time * time; // acceleration until halfway, then deceleration\n      default:\n        return time;\n    }\n  };\n\n  /**\n   * Calculate how far to scroll\n   */\n  protected _getEndLocation(element: HTMLElement): number\n  {\n    let elementRect: DOMRect       = element.getBoundingClientRect(),\n        absoluteElementTop: number = elementRect.top + window.pageYOffset,\n        location: number;\n\n    if (this._options.middleAlign)\n    {\n      location = (absoluteElementTop + (element.offsetHeight / 2)) - (window.innerHeight / 2);\n    }\n    else\n    {\n      location = absoluteElementTop;\n    }\n\n    if (this._options.offset)\n    {\n      location = location - this._options.offset;\n    }\n\n    return Math.max(location, 0);\n  };\n\n  /**\n   * Scroll the page by an increment, and check if it's time to stop\n   */\n  protected _animateScroll()\n  {\n    const PREVIOUS_FRAME_DURATION:number = this._lastFrameTime - Date.now();\n\n    this._timeLapsed += PREVIOUS_FRAME_DURATION;\n\n    const PERCENTAGE: number = this._timeLapsed <= this._options.duration ? this._timeLapsed / this._options.duration : 1;\n\n    this._position = this._startLocation + (this._distance * this._getEasingPattern(this._options.easing, PERCENTAGE));\n\n    if (this._container)\n    {\n      this._container.scrollTop = this._position;\n    }\n    else\n    {\n      window.scrollTo(0, this._position);\n    }\n\n    let currentLocation = this._getScrollLocation(),\n        scrollHeight: number = this._container ? this._container.scrollHeight : document.body.scrollHeight,\n        internalHeight: number = this._container ? this._container.clientHeight + currentLocation : window.innerHeight + currentLocation;\n\n\n    if (this._position == this._endLocation || currentLocation == this._endLocation || internalHeight > scrollHeight)\n    {\n      this._options.callbackAfter(this._element);\n    }\n    else\n    {\n      this._lastFrameTime = Date.now();\n      requestAnimationFrame(() => this._animateScroll());\n    }\n  };\n\n}\n","import {Directive, ElementRef, HostListener, Input, OnInit} from '@angular/core';\nimport {ISmoothScrollOptions} from \"../../interfaces/ISmoothScrollOptions\";\nimport {SmoothScrollService} from \"../../services/smooth-scroll.service\";\n\n@Directive({\n  selector: '[smoothScroll]'\n})\nexport class ScrollDirective implements OnInit\n{\n  constructor(protected _elementRef: ElementRef,\n              protected _smoothScrollService: SmoothScrollService)\n  {\n  }\n\n  @Input('options') options: Partial<ISmoothScrollOptions> = {};\n  @Input('scrollIf') scrollIf: boolean;\n  @Input('scrollOnClick') scrollOnClick: boolean;\n\n  @HostListener('click', ['$event.target'])\n  onClick(target: EventTarget)\n  {\n    if (this.scrollOnClick)\n    {\n      this.scroll();\n    }\n  };\n\n  public ngOnInit()\n  {\n    this.scroll();\n  }\n\n  private scroll()\n  {\n    if (typeof this.scrollIf === 'undefined' || this.scrollIf === true)\n    {\n      setTimeout(() => {\n        this._smoothScrollService.scrollTo(this._elementRef.nativeElement, this.options);\n      }, 0);\n    }\n  }\n}\n","import {Directive, HostListener, Input} from '@angular/core';\nimport {ISmoothScrollOptions} from \"../../interfaces/ISmoothScrollOptions\";\nimport {SmoothScrollService} from \"../../services/smooth-scroll.service\";\n\n@Directive({\n  selector: '[smoothScrollTo]'\n})\nexport class ScrollToDirective\n{\n\n  constructor(protected _smoothScrollService: SmoothScrollService)\n  {\n  }\n\n  @Input('scrollTo') scrollTo: string;\n  @Input('options') options: Partial<ISmoothScrollOptions> = {};\n\n  @HostListener('click')\n  onClick()\n  {\n    const TARGET:HTMLElement = document.getElementById(this.scrollTo);\n\n    if (!TARGET)\n    {\n      return;\n    }\n\n    this._smoothScrollService.scrollTo(TARGET, this.options);\n  };\n}\n","import {NgModule} from '@angular/core';\nimport {ScrollToDirective} from './directives/scroll-to/scroll-to.directive';\nimport {ScrollDirective} from './directives/scroll/scroll.directive';\n\n@NgModule({\n  imports:      [],\n  declarations: [ScrollToDirective, ScrollDirective],\n  exports:      [ScrollToDirective, ScrollDirective]\n})\nexport class SmoothScrollModule\n{\n\n}\n"]}